plugins {
    id 'java-library'
    id 'war' // Usado para empacotar como um WAR (caso você queira usar em um servidor como o GlassFish)
}

group = 'com.exemplo'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'


repositories {
    mavenCentral()
    maven {
        url 'https://repo.eclipse.org/content/repositories/eclipse-releases/'
    }
}

dependencies {
    // Logging
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // Hibernate + HikariCP (usado para JPA)

implementation 'org.hibernate:hibernate-hikaricp:6.6.0.Final'

    implementation 'org.hibernate:hibernate-core:6.6.0.Final'

    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'

    // Validação
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.3.5'

    // JSTL
    implementation 'javax.servlet:jstl:1.2'
    implementation 'taglibs:standard:1.1.2'

    // Servlet API – deve ser "provided", pois o servidor (Payara) fornece isso
    providedCompile 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    // Jakarta EE API – também fornecida pelo servidor
    providedCompile 'jakarta.platform:jakarta.jakartaee-api:10.0.0'


    // Jersey – JAX-RS (REST)
     implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.1.3'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.1.3'

    // Testes
    testImplementation 'junit:junit:4.13.2'
}

configurations.all {
    exclude group: 'org.hibernate', module: 'hibernate-c3p0'
}

war {
    archiveBaseName = 'ROOT' // precisa ser exatamente ROOT para URL sem prefixo
    archiveVersion = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(War).configureEach {
    dependsOn classes // Garante que as classes Java sejam compiladas antes do empacotamento
}

