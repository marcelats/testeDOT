plugins {
    id 'java-library'
    id 'war' // Usado para empacotar como um WAR (caso você queira usar em um servidor como o GlassFish)
}

group = 'com.exemplo'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'


repositories {
    mavenCentral()
    maven {
        url 'https://repo.eclipse.org/content/repositories/eclipse-releases/'
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:2.0.9'
    // Hibernate ORM 6.6
    implementation 'org.hibernate:hibernate-core:6.6.0.Final'
    implementation 'org.hibernate:hibernate-hikaricp:6.6.0.Final'
    // Jakarta Persistence 3.2
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'

    // Para usar o HikariCP (opcional, caso precise de Connection Pool)
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    implementation 'org.postgresql:postgresql:42.3.5'  // ou a versão mais recente do driver JDBC do PostgreSQL
    //implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
    //implementation 'jakarta.json.bind:jakarta.json.bind-api:2.0.0'
    //implementation 'org.glassfish:jakarta.json:2.0.0'
    //implementation 'jakarta.json:jakarta.json-api:2.0.0'
    //implementation 'org.eclipse.parsson:parsson:1.0.0'
    //implementation files('lib/yasson-2.0.4.jar')
    //implementation fileTree(dir: 'lib', include: '*.jar')
    implementation 'javax.servlet:jstl:1.2'
    implementation 'taglibs:standard:1.1.2'
}
configurations.all {
    exclude group: 'org.hibernate', module: 'hibernate-c3p0'
}


war {
    archiveBaseName = 'my-web-project'
    archiveVersion = '1.0'
    //from {
      //  configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    //}
    //from('build/classes/java/main') { into 'WEB-INF/classes' }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(War).configureEach {
    dependsOn classes // Garante que as classes Java sejam compiladas antes do empacotamento
}

